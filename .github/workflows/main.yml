name: Simling Prototype CI/CD

on:
  push:
    branches: [ master ]

jobs:
  lint-and-test:
    name: Lint & Test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.x' # Use a recent Python 3 version
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pygame
        # Install requirements.txt if it grows beyond pygame
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with Flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with unittest
      run: |
        # Pygame tests might need a display server, xvfb can provide a virtual one
        sudo apt-get update && sudo apt-get install -y xvfb
        xvfb-run python -m unittest discover -s . -p "test_*.py"

  build-windows:
    name: Build Windows Executable
    runs-on: windows-latest
    needs: lint-and-test # Run after linting and tests pass
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.x'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pygame pyinstaller
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Build executable with PyInstaller
      run: |
        pyinstaller --name SimlingPrototype --onefile --windowed --add-data "assets;assets" main.py
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: SimlingPrototype-Windows
        path: dist/SimlingPrototype.exe

  build-macos:
    name: Build macOS Application
    runs-on: macos-latest
    needs: lint-and-test
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.x'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pygame pyinstaller
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Build application with PyInstaller
      run: |
        pyinstaller --name SimlingPrototype --onefile --windowed --add-data "assets:assets" main.py
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: SimlingPrototype-macOS
        path: dist/SimlingPrototype # PyInstaller creates a Unix executable, not a .app bundle by default with --onefile

  build-linux:
    name: Build Linux Executable
    runs-on: ubuntu-latest
    needs: lint-and-test
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.x'
    - name: Install dependencies and system libraries for Pygame/PyInstaller
      run: |
        python -m pip install --upgrade pip
        pip install pygame pyinstaller
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        # For Pygame and Tkinter (often used by PyInstaller for windowed apps if not specified otherwise)
        sudo apt-get update
        sudo apt-get install -y libsdl2-dev libsdl2-image-dev libsdl2-mixer-dev libsdl2-ttf-dev # Pygame dependencies
        sudo apt-get install -y python3-tk # Tkinter, if needed by PyInstaller default windowed mode
    - name: Build executable with PyInstaller
      run: |
        # xvfb might be needed if any part of PyInstaller or the app tries to use display during build
        xvfb-run pyinstaller --name SimlingPrototype --onefile --windowed --add-data "assets:assets" main.py
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: SimlingPrototype-Linux
        path: dist/SimlingPrototype
